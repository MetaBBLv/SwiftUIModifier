//
//  FFState.swift
//  FFModifier
//
//  Created by BBLv on 2023/7/24.
//
// state的工作原理
//  所有的应用程序都会更改状态。例如，用户可能点击了按钮来显示更多信息，它们可能在文本框中输入了一些文本，或者从日期选择器中选择了日期-所有这些都设计应用程序从一种状态转移到另一种状态。
//  状态的问题在于它很混乱：当它发生变化时，我们需要发现该变化并更新我们的布局。一开始这可能听起来很简单，但随着我们的状态不断变多，它变得越来越困难--很容易忘记更新某件事或者跟新顺序错误，从而导致用户界面状态与预期不匹配。
//  SwiftUI通过我们从控件中删除状态来解决这个问题。当我们想视图中添加属性时，它们实际上时惰性的--当然，它们具有值，但更改它们不会执行任何操作。但是，如果我们在它们之前添加特殊的@State属性，SwiftUI将自动监视更改并更新使用该状态的视图的任何部分。
//  当实际到饮用某些状态时。例如，告诉State在切换开关时更改-我们不能直接引用该属性。这是因为Swift会认为我们只想立即读取该值，而不是说“请随着情况的变化也更新该值”。幸运的事，SwiftUI的解决发难时在属性名称之前放置一个美元符号，这让我们可以引用底层数据并定而不是其当前值。我知道一开始这有点令人困惑，但一两个小时后他就变成了第二天性。
//  请记住，SwiftUI时声明性的，这意味着我我们预先告诉他所有可能状态的所有布局，并让他弄清楚当属性更改时如何在它们之间移动。我们称之为绑定-要求SwiftUI同步UI控件和底层属性之间的更改。

import SwiftUI

struct FFState: View {
    var body: some View {
        Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)
    }
}

#Preview {
    FFState()
}
